from os.path import exists
import argparse
import pefile
import pandas as pd

# Argument Parsing Logic
parser = argparse.ArgumentParser(description='Static analysis on file.')
parser.add_argument('-f', dest='files', type=str, nargs='+',
                    help='File for analysis (example: ircbot.exe)')
args = parser.parse_args()

# Check supplied file exists
file_names = []
for file in args.files:
    if exists(file):
        file_names.append(file)
    else:
        print("Error: {} does not exist".format(file))
        
# Check PE Sections
pe = pefile.PE(file_names[0])
sections = []
for section in pe.sections:
    sections.append([section.Name.decode('utf-8'), hex(section.VirtualAddress), section.Misc_VirtualSize, section.SizeOfRawData] )
    
# Create DataFrame
print('[+] Printing PE Section Data')
malware_table = pd.DataFrame(columns=["section_name", "virtual_address", "misc_virtual_size", "size_of_raw_data"], data=sections)
malware_table.to_json(output_path + "/pe_sections.json", index=False, orient='table')
print(malware_table)

""" 
TODO
Save PE Imports to file to reduce output
""" 
# Check PE Imports
print('\n[+] Printing PE Imports')
for entry in pe.DIRECTORY_ENTRY_IMPORT:
    print(entry.dll.decode('utf-8'))
    for function in entry.imports:
        print('\t',function.name.decode('utf-8'))
     
# Check PE Strings
print('\n[+] Saving strings for later analysis')
os.system('strings {} > {}'.format(file_names[0], str(output_path)+"/strings.txt"))

# Disassembling PE
# get the address of the program entry point from the program header
entrypoint = pe.OPTIONAL_HEADER.AddressOfEntryPoint

# compute memory address where the entry code will be loaded into memory
entrypoint_address = entrypoint+pe.OPTIONAL_HEADER.ImageBase

# get the binary code from the PE file object
binary_code = pe.get_memory_mapped_image()[entrypoint:entrypoint+100]

# initialize disassembler to disassemble 32 bit x86 binary code
disassembler = Cs(CS_ARCH_X86, CS_MODE_32)

# disassemble the code
for instruction in disassembler.disasm(binary_code, entrypoint_address):
    print("{}\t{}".format(instruction.mnemonic, instruction.op_str))
